<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project View - CMS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Status badge styles aligned with DB ENUM */
        .status-pending {
            background-color: #fef3c7; /* Amber-100 */
            color: #92400e; /* Amber-700 */
        }
        .status-in-progress {
            background-color: #dbeafe; /* Blue-100 */
            color: #1e40af; /* Blue-800 */
        }
        .status-completed {
            background-color: #d1fae5; /* Green-100 */
            color: #065f46; /* Green-800 */
        }
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        /* Modal transition styles */
        .modal-bg-enter { transition: opacity 0.3s ease-out; }
        .modal-bg-enter-from { opacity: 0; }
        .modal-bg-enter-to { opacity: 1; }
        .modal-bg-leave { transition: opacity 0.2s ease-in; }
        .modal-bg-leave-from { opacity: 1; }
        .modal-bg-leave-to { opacity: 0; }

        .modal-panel-enter { transition: all 0.3s ease-out; }
        .modal-panel-enter-from { opacity: 0; transform: translateY(-20px) scale(0.95); }
        .modal-panel-enter-to { opacity: 1; transform: translateY(0) scale(1); }
        .modal-panel-leave { transition: all 0.2s ease-in; }
        .modal-panel-leave-from { opacity: 1; transform: translateY(0) scale(1); }
        .modal-panel-leave-to { opacity: 0; transform: translateY(-20px) scale(0.95); }

        .loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .message-area {
            padding: 0.75rem;
            margin-bottom: 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
        }
        .message-success {
            background-color: #d1fae5; /* Green-100 */
            color: #065f46; /* Green-800 */
            border: 1px solid #34d399; /* Green-400 */
        }
        .message-error {
            background-color: #fee2e2; /* Red-100 */
            color: #991b1b; /* Red-800 */
            border: 1px solid #f87171; /* Red-400 */
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen p-4 sm:p-6 lg:p-8">
<div class="container mx-auto">
    <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800">Project Dashboard</h1>
        <p class="text-gray-600">Manage and track all your company projects.</p>
    </header>

    <div id="globalMessage" class="message-area hidden"></div>

    <div class="mb-6 flex flex-col sm:flex-row justify-between items-center gap-4">
        <button id="addProjectBtn" class="w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out flex items-center justify-center">
            <i class="fas fa-plus mr-2"></i> Add New Project
        </button>
        <div class="w-full sm:w-auto flex flex-col sm:flex-row gap-2">
            <select id="filterStatus" class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="all">All Statuses</option>
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
            </select>
            <input type="text" id="searchProject" placeholder="Search projects..." class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>
    </div>

    <div id="loadingIndicator" class="loading-spinner hidden"></div>

    <div id="projectGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    </div>

    <div id="noProjectsMessage" class="hidden text-center py-12">
        <i class="fas fa-folder-open fa-3x text-gray-400 mb-4"></i>
        <p class="text-xl text-gray-600">No projects found.</p>
        <p class="text-gray-500">Get started by adding a new project or check your filters!</p>
    </div>
</div>

<div id="projectModal" class="fixed inset-0 bg-gray-800 bg-opacity-75 overflow-y-auto h-full w-full flex items-center justify-center hidden px-4 modal-bg-enter-from" data-transition-state="closed">
    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-2xl w-full max-w-lg transform transition-all modal-panel-enter-from">
        <div class="flex justify-between items-center mb-6">
            <h2 id="modalTitle" class="text-2xl font-semibold text-gray-800">Add New Project</h2>
            <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
                <i class="fas fa-times fa-lg"></i>
            </button>
        </div>
        <form id="projectForm">
            <input type="hidden" id="projectId">
            <div class="mb-4">
                <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">Project Name <span class="text-red-500">*</span></label>
                <input type="text" id="projectName" name="Name" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
            </div>
            <div class="mb-4">
                <label for="projectDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea id="projectDescription" name="Description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="projectStartDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                    <input type="date" id="projectStartDate" name="StartDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="projectEndDate" class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                    <input type="date" id="projectEndDate" name="EndDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                <div>
                    <label for="projectStatusModal" class="block text-sm font-medium text-gray-700 mb-1">Status <span class="text-red-500">*</span></label>
                    <select id="projectStatusModal" name="Status" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                        <option value="Pending">Pending</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <div>
                    <label for="projectCompanyID" class="block text-sm font-medium text-gray-700 mb-1">Company ID <span class="text-red-500">*</span></label>
                    <input type="number" id="projectCompanyID" name="CompanyID" placeholder="Enter Company ID" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                </div>
            </div>
            <div id="modalMessage" class="message-area hidden"></div>
            <div class="flex justify-end gap-3 mt-2">
                <button type="button" id="cancelModalBtn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg border border-gray-300 transition-colors">Cancel</button>
                <button type="submit" id="saveProjectBtn" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg shadow-md transition-colors">
                    <span id="saveProjectBtnText">Save Project</span>
                    <i id="saveProjectBtnSpinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // API Base URL (configure as needed)
    const API_BASE_URL = '/api'; // Replace with your actual API base URL if different

    // DOM Elements
    const projectGrid = document.getElementById('projectGrid');
    const noProjectsMessage = document.getElementById('noProjectsMessage');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const globalMessage = document.getElementById('globalMessage');

    const projectModal = document.getElementById('projectModal');
    const addProjectBtn = document.getElementById('addProjectBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const cancelModalBtn = document.getElementById('cancelModalBtn');
    const projectForm = document.getElementById('projectForm');
    const modalTitle = document.getElementById('modalTitle');
    const modalMessage = document.getElementById('modalMessage');
    const saveProjectBtn = document.getElementById('saveProjectBtn');
    const saveProjectBtnText = document.getElementById('saveProjectBtnText');
    const saveProjectBtnSpinner = document.getElementById('saveProjectBtnSpinner');

    const filterStatusSelect = document.getElementById('filterStatus');
    const searchProjectInput = document.getElementById('searchProject');

    let allProjects = []; // To store all fetched projects for client-side filtering

    // --- Authentication Placeholder ---
    function getAuthToken() {
        // In a real app, retrieve the token from localStorage, sessionStorage, or a cookie
        // return localStorage.getItem('authToken');
        return 'dummy-auth-token'; // Placeholder
    }

    // --- Utility Functions ---
    function showGlobalMessage(message, type = 'error') {
        globalMessage.textContent = message;
        globalMessage.className = `message-area ${type === 'success' ? 'message-success' : 'message-error'}`;
        globalMessage.classList.remove('hidden');
        setTimeout(() => globalMessage.classList.add('hidden'), 5000);
    }

    function showModalMessage(message, type = 'error') {
        modalMessage.textContent = message;
        modalMessage.className = `message-area ${type === 'success' ? 'message-success' : 'message-error'}`;
        modalMessage.classList.remove('hidden');
    }

    function getStatusClass(status) {
        // Based on ENUM('Pending','In Progress','Completed')
        if (status === 'In Progress') return 'status-in-progress';
        if (status === 'Completed') return 'status-completed';
        if (status === 'Pending') return 'status-pending';
        return 'bg-gray-200 text-gray-800';
    }

    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        // Check if date is valid before formatting
        if (isNaN(date.getTime())) return 'Invalid Date';
        return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    }

    // --- API Interaction Functions ---
    async function fetchProjects() {
        loadingIndicator.classList.remove('hidden');
        projectGrid.classList.add('hidden');
        noProjectsMessage.classList.add('hidden');
        try {
            const token = getAuthToken();
            const response = await fetch(`${API_BASE_URL}/projects`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                    // Add other headers like 'Content-Type': 'application/json' if needed
                }
            });

            if (!response.ok) {
                // Handle HTTP errors like 401, 403, 500
                const errorData = await response.json().catch(() => ({ message: `HTTP error! Status: ${response.status}` }));
                throw new Error(errorData.message || `Failed to fetch projects. Status: ${response.status}`);
            }

            const data = await response.json();
            allProjects = data.projects || data; // Adapt to your API response structure
            filterAndRenderProjects(); // Initial render with all fetched projects

        } catch (error) {
            console.error('Error fetching projects:', error);
            showGlobalMessage(`Error fetching projects: ${error.message}`);
            allProjects = []; // Reset projects on error
            filterAndRenderProjects(); // Render to show no projects message
        } finally {
            loadingIndicator.classList.add('hidden');
        }
    }

    // Function to render project cards
    function renderProjects(projectsToRender = allProjects) {
        projectGrid.innerHTML = '';
        if (projectsToRender.length === 0) {
            noProjectsMessage.classList.remove('hidden');
            projectGrid.classList.add('hidden');
        } else {
            noProjectsMessage.classList.add('hidden');
            projectGrid.classList.remove('hidden');
            projectsToRender.forEach(project => {
                const card = document.createElement('div');
                card.className = `bg-white rounded-xl shadow-lg p-6 transition-all duration-300 card-hover project-card flex flex-col`;
                // Use project.ProjectID from your DB schema
                card.innerHTML = `
                        <div class="flex justify-between items-start mb-4">
                            <h2 class="text-xl font-semibold text-gray-800">${project.Name}</h2>
                            <span class="${getStatusClass(project.Status)} text-xs font-semibold px-2 py-1 rounded-full">${project.Status}</span>
                        </div>
                        <p class="text-gray-600 text-sm mb-4 line-clamp-3 flex-grow">${project.Description || 'No description.'}</p>

                        <div class="text-sm text-gray-500 mb-4 space-y-1">
                            <p><i class="fas fa-building fa-fw mr-2 text-gray-400"></i>Company ID: <span class="font-medium text-gray-700">${project.CompanyID}</span></p>
                            <p><i class="fas fa-calendar-alt fa-fw mr-2 text-gray-400"></i>Start: <span class="font-medium text-gray-700">${formatDate(project.StartDate)}</span></p>
                            <p><i class="fas fa-calendar-check fa-fw mr-2 text-gray-400"></i>End: <span class="font-medium text-gray-700">${formatDate(project.EndDate)}</span></p>
                        </div>

                        <div class="flex justify-end gap-2 mt-auto">
                            <button class="view-btn text-blue-600 hover:text-blue-800 text-sm font-medium" data-id="${project.ProjectID}"><i class="fas fa-eye mr-1"></i>View Tasks</button>
                            <button class="edit-btn text-green-600 hover:text-green-800 text-sm font-medium" data-id="${project.ProjectID}"><i class="fas fa-edit mr-1"></i>Edit</button>
                            <button class="delete-btn text-red-600 hover:text-red-800 text-sm font-medium" data-id="${project.ProjectID}"><i class="fas fa-trash mr-1"></i>Delete</button>
                        </div>
                    `;
                projectGrid.appendChild(card);
            });
        }
        attachEventListenersToCards();
    }

    function attachEventListenersToCards() {
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', handleEditProject);
        });
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', handleDeleteProject);
        });
        document.querySelectorAll('.view-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const projectId = e.currentTarget.dataset.id;
                // Redirect to Task View, passing projectId as a query parameter
                // window.location.href = `/task-view.html?projectId=${projectId}`;
                alert(`Navigating to tasks for project ID: ${projectId}. Implement actual navigation.`);
            });
        });
    }

    // Modal Management
    function openModal(project = null) {
        projectForm.reset();
        modalMessage.classList.add('hidden');
        if (project) {
            modalTitle.textContent = 'Edit Project';
            document.getElementById('projectId').value = project.ProjectID; // Use ProjectID from DB
            document.getElementById('projectName').value = project.Name;
            document.getElementById('projectDescription').value = project.Description || '';
            document.getElementById('projectStartDate').value = project.StartDate ? project.StartDate.split('T')[0] : ''; // Format for date input
            document.getElementById('projectEndDate').value = project.EndDate ? project.EndDate.split('T')[0] : ''; // Format for date input
            document.getElementById('projectStatusModal').value = project.Status;
            document.getElementById('projectCompanyID').value = project.CompanyID;
        } else {
            modalTitle.textContent = 'Add New Project';
            document.getElementById('projectId').value = '';
            // Pre-fill CompanyID if available from user session (example)
            // const userData = JSON.parse(localStorage.getItem('userData'));
            // if (userData && userData.companyId) {
            //    document.getElementById('projectCompanyID').value = userData.companyId;
            // }
        }
        projectModal.classList.remove('hidden');
        requestAnimationFrame(() => {
            projectModal.classList.remove('modal-bg-enter-from');
            projectModal.querySelector('.modal-panel-enter-from').classList.remove('modal-panel-enter-from');
            projectModal.dataset.transitionState = 'opened';
        });
    }

    function closeModal() {
        projectModal.dataset.transitionState = 'closing';
        projectModal.classList.add('modal-bg-leave-to');
        projectModal.querySelector('div > div').classList.add('modal-panel-leave-to');
        setTimeout(() => {
            projectModal.classList.add('hidden');
            projectModal.classList.remove('modal-bg-leave-to', 'modal-bg-enter-from');
            const panel = projectModal.querySelector('div > div');
            panel.classList.remove('modal-panel-leave-to', 'modal-panel-enter-from');
            projectModal.dataset.transitionState = 'closed';
        }, 200);
    }

    addProjectBtn.addEventListener('click', () => openModal());
    closeModalBtn.addEventListener('click', closeModal);
    cancelModalBtn.addEventListener('click', closeModal);

    // Form Submission (Add/Edit Project)
    projectForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        saveProjectBtnText.textContent = 'Saving...';
        saveProjectBtnSpinner.classList.remove('hidden');
        saveProjectBtn.disabled = true;
        modalMessage.classList.add('hidden');

        const formData = new FormData(projectForm);
        const projectData = Object.fromEntries(formData.entries());
        const projectId = document.getElementById('projectId').value;

        // Ensure numeric fields are numbers if your backend expects them
        if (projectData.CompanyID) projectData.CompanyID = parseInt(projectData.CompanyID, 10);


        const method = projectId ? 'PUT' : 'POST';
        const endpoint = projectId ? `${API_BASE_URL}/projects/${projectId}` : `${API_BASE_URL}/projects`;

        try {
            const token = getAuthToken();
            const response = await fetch(endpoint, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(projectData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || `Failed to ${projectId ? 'update' : 'create'} project. Status: ${response.status}`);
            }

            showGlobalMessage(`Project successfully ${projectId ? 'updated' : 'created'}!`, 'success');
            fetchProjects(); // Refresh the project list
            closeModal();

        } catch (error) {
            console.error(`Error ${projectId ? 'updating' : 'creating'} project:`, error);
            showModalMessage(`Error: ${error.message}`);
        } finally {
            saveProjectBtnText.textContent = 'Save Project';
            saveProjectBtnSpinner.classList.add('hidden');
            saveProjectBtn.disabled = false;
        }
    });

    // Delete Project
    async function handleDeleteProject(event) {
        const projectId = event.currentTarget.dataset.id;
        if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
            try {
                const token = getAuthToken();
                const response = await fetch(`${API_BASE_URL}/projects/${projectId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: `HTTP error! Status: ${response.status}` }));
                    throw new Error(errorData.message || `Failed to delete project. Status: ${response.status}`);
                }

                // const result = await response.json(); // If backend sends a confirmation message
                showGlobalMessage('Project deleted successfully.', 'success');
                fetchProjects(); // Refresh list

            } catch (error) {
                console.error('Error deleting project:', error);
                showGlobalMessage(`Error deleting project: ${error.message}`);
            }
        }
    }

    // Filtering and Searching
    function filterAndRenderProjects() {
        const statusFilter = filterStatusSelect.value;
        const searchTerm = searchProjectInput.value.toLowerCase();
        let tempProjects = allProjects;

        if (statusFilter !== 'all') {
            tempProjects = tempProjects.filter(p => p.Status === statusFilter);
        }
        if (searchTerm) {
            tempProjects = tempProjects.filter(p =>
                (p.Name && p.Name.toLowerCase().includes(searchTerm)) ||
                (p.Description && p.Description.toLowerCase().includes(searchTerm))
            );
        }
        renderProjects(tempProjects);
    }

    filterStatusSelect.addEventListener('change', filterAndRenderProjects);
    searchProjectInput.addEventListener('input', filterAndRenderProjects);

    fetchProjects();

</script>
</body>
</html>