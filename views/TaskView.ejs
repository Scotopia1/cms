<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task View</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .priority-high { background-color: #fecaca; color: #b91c1c; } /* Red-200, Red-700 */
        .priority-medium { background-color: #fef08a; color: #854d0e; } /* Yellow-200, Yellow-700 */
        .priority-low { background-color: #d1fae5; color: #065f46; } /* Green-200, Green-700 */

        .status-todo { background-color: #e0e7ff; color: #3730a3; } /* Indigo-200, Indigo-700 */
        .status-in-progress { background-color: #fef08a; color: #854d0e; } /* Yellow-200, Yellow-700 */
        .status-completed { background-color: #d1fae5; color: #065f46; } /* Green-200, Green-700 */
        .status-blocked { background-color: #fecaca; color: #b91c1c; } /* Red-200, Red-700 */

        .table-fixed-layout {
            table-layout: fixed;
        }
        .table-fixed-layout th, .table-fixed-layout td {
            overflow-wrap: break-word;
            word-wrap: break-word; /* For older browsers */
            hyphens: auto; /* For older browsers */
        }
        .modal-bg-enter { transition: opacity 0.3s ease-out; }
        .modal-bg-enter-from { opacity: 0; }
        .modal-bg-enter-to { opacity: 1; }
        .modal-bg-leave { transition: opacity 0.2s ease-in; }
        .modal-bg-leave-from { opacity: 1; }
        .modal-bg-leave-to { opacity: 0; }

        .modal-panel-enter { transition: all 0.3s ease-out; }
        .modal-panel-enter-from { opacity: 0; transform: translateY(-20px) scale(0.95); }
        .modal-panel-enter-to { opacity: 1; transform: translateY(0) scale(1); }
        .modal-panel-leave { transition: all 0.2s ease-in; }
        .modal-panel-leave-from { opacity: 1; transform: translateY(0) scale(1); }
        .modal-panel-leave-to { opacity: 0; transform: translateY(-20px) scale(0.95); }

    </style>
</head>
<body class="bg-gray-100 min-h-screen p-4 sm:p-6 lg:p-8">
<div class="container mx-auto">
    <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800">Task View</h1>
        <p class="text-gray-600">Oversee and manage all project tasks efficiently.</p>
    </header>

    <div class="mb-6 flex flex-col sm:flex-row justify-between items-center gap-4">
        <button id="addTaskBtn" class="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out flex items-center justify-center">
            <i class="fas fa-plus mr-2"></i> Add New Task
        </button>
        <div class="w-full sm:w-auto flex flex-col sm:flex-row gap-2">
            <select id="filterProject" class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                <option value="all">All Projects</option>
            </select>
            <select id="filterStatus" class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                <option value="all">All Statuses</option>
                <option value="todo">To Do</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="blocked">Blocked</option>
            </select>
            <select id="filterPriority" class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                <option value="all">All Priorities</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
            </select>
            <input type="text" id="searchTask" placeholder="Search tasks..." class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
        </div>
    </div>

    <div class="bg-white shadow-xl rounded-lg overflow-x-auto">
        <table class="w-full min-w-max table-fixed-layout">
            <thead class="bg-gray-50">
            <tr>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">Task Name</th>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Project</th>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Assignee</th>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">Priority</th>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Due Date</th>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Status</th>
                <th class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">Actions</th>
            </tr>
            </thead>
            <tbody id="taskTableBody" class="bg-white divide-y divide-gray-200">
            </tbody>
        </table>
        <div id="noTasksMessage" class="hidden text-center py-12 px-4">
            <i class="fas fa-tasks fa-3x text-gray-400 mb-4"></i>
            <p class="text-xl text-gray-600">No tasks found.</p>
            <p class="text-gray-500">Try adjusting your filters or add a new task!</p>
        </div>
    </div>
</div>

<div id="taskModal" class="fixed inset-0 bg-gray-800 bg-opacity-75 overflow-y-auto h-full w-full flex items-center justify-center hidden px-4 modal-bg-enter-from" data-transition-state="closed">
    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-2xl w-full max-w-lg transform transition-all modal-panel-enter-from">
        <div class="flex justify-between items-center mb-6">
            <h2 id="modalTitle" class="text-2xl font-semibold text-gray-800">Add New Task</h2>
            <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
                <i class="fas fa-times fa-lg"></i>
            </button>
        </div>
        <form id="taskForm">
            <input type="hidden" id="taskId">
            <div class="mb-4">
                <label for="taskName" class="block text-sm font-medium text-gray-700 mb-1">Task Name</label>
                <input type="text" id="taskName" name="taskName" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" required>
            </div>
            <div class="mb-4">
                <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea id="taskDescription" name="taskDescription" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"></textarea>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="taskProject" class="block text-sm font-medium text-gray-700 mb-1">Project</label>
                    <select id="taskProject" name="taskProject" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" required>
                    </select>
                </div>
                <div>
                    <label for="taskAssignee" class="block text-sm font-medium text-gray-700 mb-1">Assignee</label>
                    <select id="taskAssignee" name="taskAssignee" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Unassigned</option>
                    </select>
                </div>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="taskDueDate" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                    <input type="date" id="taskDueDate" name="taskDueDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label for="taskPriority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                    <select id="taskPriority" name="taskPriority" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
            </div>
            <div class="mb-6">
                <label for="taskStatusModal" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select id="taskStatusModal" name="taskStatusModal" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="todo">To Do</option>
                    <option value="in-progress">In Progress</option>
                    <option value="completed">Completed</option>
                    <option value="blocked">Blocked</option>
                </select>
            </div>
            <div class="flex justify-end gap-3">
                <button type="button" id="cancelModalBtn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg border border-gray-300 transition-colors">Cancel</button>
                <button type="submit" id="saveTaskBtn" class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-lg shadow-md transition-colors">Save Task</button>
            </div>
        </form>
    </div>
</div>

<script>
    // Dummy data for tasks, projects, and members
    let projectsData = [
        { id: 1, name: 'E-commerce Platform' },
        { id: 2, name: 'Mobile App Redesign' },
        { id: 3, name: 'Marketing Campaign Q3' },
        { id: 4, name: 'New Website Launch' },
        { id: 5, name: 'API Integration' }
    ];

    let membersData = [
        { id: 1, name: 'Alice Wonderland' },
        { id: 2, name: 'Bob The Builder' },
        { id: 3, name: 'Charlie Brown' },
        { id: 4, name: 'Diana Prince' },
        { id: 5, name: 'Edward Scissorhands'}
    ];

    let tasks = [
        { id: 1, name: 'Design Homepage UI', projectId: 1, assigneeId: 1, priority: 'high', dueDate: '2024-07-15', status: 'in-progress', description: 'Detailed design of the e-commerce homepage.' },
        { id: 2, name: 'Develop Payment Gateway', projectId: 1, assigneeId: 2, priority: 'high', dueDate: '2024-08-01', status: 'todo', description: 'Integrate Stripe and PayPal.' },
        { id: 3, name: 'User Testing for Mobile App', projectId: 2, assigneeId: 3, priority: 'medium', dueDate: '2024-07-20', status: 'todo', description: 'Conduct usability tests with 10 users.' },
        { id: 4, name: 'Finalize Q3 Ad Creatives', projectId: 3, assigneeId: 4, priority: 'medium', dueDate: '2024-06-30', status: 'completed', description: 'Get approval on all ad visuals and copy.' },
        { id: 5, name: 'Setup Staging Environment', projectId: 4, assigneeId: 2, priority: 'high', dueDate: '2024-07-05', status: 'blocked', description: 'Server access pending.' },
        { id: 6, name: 'Write API Documentation', projectId: 5, assigneeId: 5, priority: 'low', dueDate: '2024-09-01', status: 'todo', description: 'Document all public API endpoints.' },
        { id: 7, name: 'Product Page Backend Logic', projectId: 1, assigneeId: 1, priority: 'high', dueDate: '2024-07-25', status: 'in-progress', description: 'Implement backend logic for product display and filtering.'},
        { id: 8, name: 'Mobile App Onboarding Flow', projectId: 2, assigneeId: 3, priority: 'medium', dueDate: '2024-08-10', status: 'todo', description: 'Design and implement the new user onboarding screens.'},
    ];

    const taskTableBody = document.getElementById('taskTableBody');
    const noTasksMessage = document.getElementById('noTasksMessage');
    const taskModal = document.getElementById('taskModal');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const cancelModalBtn = document.getElementById('cancelModalBtn');
    const taskForm = document.getElementById('taskForm');
    const modalTitle = document.getElementById('modalTitle');

    const filterProjectSelect = document.getElementById('filterProject');
    const filterStatusSelect = document.getElementById('filterStatus');
    const filterPrioritySelect = document.getElementById('filterPriority');
    const searchTaskInput = document.getElementById('searchTask');
    const taskProjectModalSelect = document.getElementById('taskProject');
    const taskAssigneeModalSelect = document.getElementById('taskAssignee');

    function getPriorityClass(priority) {
        if (priority === 'high') return 'priority-high';
        if (priority === 'medium') return 'priority-medium';
        if (priority === 'low') return 'priority-low';
        return 'bg-gray-100 text-gray-800';
    }

    function getStatusClass(status) {
        if (status === 'todo') return 'status-todo';
        if (status === 'in-progress') return 'status-in-progress';
        if (status === 'completed') return 'status-completed';
        if (status === 'blocked') return 'status-blocked';
        return 'bg-gray-100 text-gray-800';
    }

    function getStatusText(status) {
        const map = {'todo': 'To Do', 'in-progress': 'In Progress', 'completed': 'Completed', 'blocked': 'Blocked'};
        return map[status] || status;
    }

    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        const options = { year: 'numeric', month: 'short', day: 'numeric' };
        // Ensure date is parsed correctly, handling potential timezone issues if dates are simple YYYY-MM-DD
        const date = new Date(dateString + 'T00:00:00');
        return date.toLocaleDateString(undefined, options);
    }

    function populateProjectFilter() {
        projectsData.forEach(project => {
            const option = document.createElement('option');
            option.value = project.id;
            option.textContent = project.name;
            filterProjectSelect.appendChild(option.cloneNode(true));
            taskProjectModalSelect.appendChild(option);
        });
    }

    function populateAssigneeFilter() {
        membersData.forEach(member => {
            const option = document.createElement('option');
            option.value = member.id;
            option.textContent = member.name;
            taskAssigneeModalSelect.appendChild(option);
        });
    }

    function renderTasks(filteredTasks = tasks) {
        taskTableBody.innerHTML = ''; // Clear existing tasks
        if (filteredTasks.length === 0) {
            noTasksMessage.classList.remove('hidden');
            taskTableBody.classList.add('hidden');
        } else {
            noTasksMessage.classList.add('hidden');
            taskTableBody.classList.remove('hidden');
            filteredTasks.forEach(task => {
                const project = projectsData.find(p => p.id === task.projectId);
                const assignee = membersData.find(m => m.id === task.assigneeId);

                const row = taskTableBody.insertRow();
                row.className = "hover:bg-gray-50 transition-colors duration-150";
                row.innerHTML = `
                        <td class="p-4 text-sm text-gray-700">${task.name}</td>
                        <td class="p-4 text-sm text-gray-500">${project ? project.name : 'N/A'}</td>
                        <td class="p-4 text-sm text-gray-500">${assignee ? assignee.name : 'Unassigned'}</td>
                        <td class="p-4 text-sm"><span class="px-2 py-1 text-xs font-semibold rounded-full ${getPriorityClass(task.priority)}">${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}</span></td>
                        <td class="p-4 text-sm text-gray-500">${formatDate(task.dueDate)}</td>
                        <td class="p-4 text-sm"><span class="px-2 py-1 text-xs font-semibold rounded-full ${getStatusClass(task.status)}">${getStatusText(task.status)}</span></td>
                        <td class="p-4 text-sm text-gray-500">
                            <button class="edit-btn text-indigo-600 hover:text-indigo-800 mr-2" data-id="${task.id}"><i class="fas fa-edit"></i></button>
                            <button class="delete-btn text-red-500 hover:text-red-700" data-id="${task.id}"><i class="fas fa-trash"></i></button>
                        </td>
                    `;
            });
        }
        attachEventListenersToRows();
    }

    function attachEventListenersToRows() {
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', handleEditTask);
        });
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', handleDeleteTask);
        });
    }

    function openModal(task = null) {
        taskForm.reset();
        if (task) {
            modalTitle.textContent = 'Edit Task';
            document.getElementById('taskId').value = task.id;
            document.getElementById('taskName').value = task.name;
            document.getElementById('taskDescription').value = task.description || '';
            document.getElementById('taskProject').value = task.projectId;
            document.getElementById('taskAssignee').value = task.assigneeId || '';
            document.getElementById('taskDueDate').value = task.dueDate;
            document.getElementById('taskPriority').value = task.priority;
            document.getElementById('taskStatusModal').value = task.status;
        } else {
            modalTitle.textContent = 'Add New Task';
            document.getElementById('taskId').value = '';
        }
        taskModal.classList.remove('hidden');
        // Trigger animations
        requestAnimationFrame(() => {
            taskModal.classList.remove('modal-bg-enter-from');
            taskModal.querySelector('.modal-panel-enter-from').classList.remove('modal-panel-enter-from');
            taskModal.dataset.transitionState = 'opened';
        });
    }

    function closeModal() {
        taskModal.dataset.transitionState = 'closing';
        taskModal.classList.add('modal-bg-leave-to');
        taskModal.querySelector('div > div').classList.add('modal-panel-leave-to');

        setTimeout(() => {
            taskModal.classList.add('hidden');
            taskModal.classList.remove('modal-bg-leave-to');
            taskModal.classList.add('modal-bg-enter-from');
            const panel = taskModal.querySelector('div > div');
            panel.classList.remove('modal-panel-leave-to');
            panel.classList.add('modal-panel-enter-from');
            taskModal.dataset.transitionState = 'closed';
        }, 200); // Corresponds to modal-bg-leave transition
    }

    addTaskBtn.addEventListener('click', () => openModal());
    closeModalBtn.addEventListener('click', closeModal);
    cancelModalBtn.addEventListener('click', closeModal);

    taskForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const id = document.getElementById('taskId').value;
        const name = document.getElementById('taskName').value;
        const description = document.getElementById('taskDescription').value;
        const projectId = parseInt(document.getElementById('taskProject').value, 10);
        const assigneeId = document.getElementById('taskAssignee').value ? parseInt(document.getElementById('taskAssignee').value, 10) : null;
        const dueDate = document.getElementById('taskDueDate').value;
        const priority = document.getElementById('taskPriority').value;
        const status = document.getElementById('taskStatusModal').value;

        if (id) { // Editing existing task
            const taskIndex = tasks.findIndex(t => t.id == id);
            if (taskIndex > -1) {
                tasks[taskIndex] = { ...tasks[taskIndex], name, description, projectId, assigneeId, dueDate, priority, status };
            }
        } else { // Adding new task
            const newTask = {
                id: tasks.length > 0 ? Math.max(...tasks.map(t => t.id)) + 1 : 1,
                name, description, projectId, assigneeId, dueDate, priority, status
            };
            tasks.push(newTask);
        }
        filterAndRenderTasks();
        closeModal();
    });

    function handleEditTask(event) {
        const taskId = event.currentTarget.dataset.id;
        const taskToEdit = tasks.find(t => t.id == taskId);
        if (taskToEdit) {
            openModal(taskToEdit);
        }
    }

    function handleDeleteTask(event) {
        const taskId = event.currentTarget.dataset.id;
        // Replace with a custom modal for confirmation in a real app
        if (confirm('Are you sure you want to delete this task?')) {
            tasks = tasks.filter(t => t.id != taskId);
            filterAndRenderTasks();
        }
    }

    function filterAndRenderTasks() {
        const projectFilter = filterProjectSelect.value;
        const statusFilter = filterStatusSelect.value;
        const priorityFilter = filterPrioritySelect.value;
        const searchTerm = searchTaskInput.value.toLowerCase();

        let tempTasks = tasks;

        if (projectFilter !== 'all') {
            tempTasks = tempTasks.filter(t => t.projectId == projectFilter);
        }
        if (statusFilter !== 'all') {
            tempTasks = tempTasks.filter(t => t.status === statusFilter);
        }
        if (priorityFilter !== 'all') {
            tempTasks = tempTasks.filter(t => t.priority === priorityFilter);
        }
        if (searchTerm) {
            tempTasks = tempTasks.filter(t =>
                t.name.toLowerCase().includes(searchTerm) ||
                (t.description && t.description.toLowerCase().includes(searchTerm))
            );
        }

        renderTasks(tempTasks);
    }

    filterProjectSelect.addEventListener('change', filterAndRenderTasks);
    filterStatusSelect.addEventListener('change', filterAndRenderTasks);
    filterPrioritySelect.addEventListener('change', filterAndRenderTasks);
    searchTaskInput.addEventListener('input', filterAndRenderTasks);

    // Initial setup
    populateProjectFilter();
    populateAssigneeFilter();
    renderTasks();
</script>
</body>
</html>