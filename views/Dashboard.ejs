<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - CMS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .stat-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.07);
        }
        .loading-spinner-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3b82f6; /* Blue-500 */
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .message-area {
            padding: 0.75rem;
            margin-bottom: 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
        }
        .message-error {
            background-color: #fee2e2; color: #991b1b; border: 1px solid #f87171;
        }
        .task-item:hover, .member-item:hover {
            background-color: #f9fafb; /* Gray-50 */
        }
        /* Status badge styles aligned with DB ENUM */
        .status-pending { background-color: #fef3c7; color: #92400e; } /* Amber-100, Amber-700 */
        .status-in-progress { background-color: #dbeafe; color: #1e40af; } /* Blue-100, Blue-800 */
        .status-completed { background-color: #d1fae5; color: #065f46; } /* Green-100, Green-700 */

        .priority-1 { color: #ef4444; } /* Red-500 (High) */
        .priority-2 { color: #f59e0b; } /* Amber-500 (Medium) */
        .priority-3 { color: #22c55e; } /* Green-500 (Low) */
    </style>
</head>
<body class="bg-gray-100 min-h-screen p-4 sm:p-6 lg:p-8">
<div class="container mx-auto">
    <header class="mb-8 flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">Dashboard</h1>
            <p class="text-gray-600">Welcome back, <span id="userName" class="font-semibold">User</span>!</p> </div>
    </header>

    <div id="globalMessage" class="message-area hidden"></div>
    <div id="loadingIndicatorPage" class="loading-spinner-container"><div class="loading-spinner"></div></div>

    <div id="dashboardContent" class="hidden">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white p-6 rounded-xl shadow-lg stat-card">
                <div class="flex items-center">
                    <div class="p-4 bg-blue-100 rounded-full mr-4">
                        <i class="fas fa-project-diagram fa-xl text-blue-600"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Total Projects</p>
                        <p id="totalProjectsStat" class="text-3xl font-semibold text-gray-800">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white p-6 rounded-xl shadow-lg stat-card">
                <div class="flex items-center">
                    <div class="p-4 bg-yellow-100 rounded-full mr-4">
                        <i class="fas fa-tasks fa-xl text-yellow-600"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Active Tasks</p>
                        <p id="activeTasksStat" class="text-3xl font-semibold text-gray-800">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white p-6 rounded-xl shadow-lg stat-card">
                <div class="flex items-center">
                    <div class="p-4 bg-teal-100 rounded-full mr-4">
                        <i class="fas fa-users fa-xl text-teal-600"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Team Members</p>
                        <p id="totalMembersStat" class="text-3xl font-semibold text-gray-800">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white p-6 rounded-xl shadow-lg stat-card">
                <div class="flex items-center">
                    <div class="p-4 bg-red-100 rounded-full mr-4">
                        <i class="fas fa-calendar-times fa-xl text-red-600"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Upcoming Deadlines (7d)</p>
                        <p id="upcomingDeadlinesStat" class="text-3xl font-semibold text-gray-800">0</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
            <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-xl">
                <h2 class="text-xl font-semibold text-gray-700 mb-4 border-b pb-3">Recent Active Tasks</h2>
                <div id="recentTasksList" class="space-y-3 max-h-96 overflow-y-auto">
                    <p id="noRecentTasksMessage" class="text-gray-500 text-sm hidden">No active tasks found.</p>
                </div>
            </div>
            <div class="bg-white p-6 rounded-xl shadow-xl">
                <h2 class="text-xl font-semibold text-gray-700 mb-4 border-b pb-3">Team Overview</h2>
                <div id="teamOverviewList" class="space-y-3 max-h-96 overflow-y-auto">
                    <p id="noTeamMembersMessage" class="text-gray-500 text-sm hidden">No team members found.</p>
                </div>
            </div>
        </div>
    </div> </div>

<script>
    const API_BASE_URL = '/api';

    // DOM Elements
    const loadingIndicatorPage = document.getElementById('loadingIndicatorPage');
    const globalMessage = document.getElementById('globalMessage');
    const dashboardContent = document.getElementById('dashboardContent');
    const userNameDisplay = document.getElementById('userName');

    const totalProjectsStat = document.getElementById('totalProjectsStat');
    const activeTasksStat = document.getElementById('activeTasksStat');
    const totalMembersStat = document.getElementById('totalMembersStat');
    const upcomingDeadlinesStat = document.getElementById('upcomingDeadlinesStat');

    const recentTasksList = document.getElementById('recentTasksList');
    const noRecentTasksMessage = document.getElementById('noRecentTasksMessage');
    const teamOverviewList = document.getElementById('teamOverviewList');
    const noTeamMembersMessage = document.getElementById('noTeamMembersMessage');

    // --- Authentication Placeholder ---
    function getAuthToken() {
        // return localStorage.getItem('authToken');
        return 'dummy-auth-token-user123'; // Placeholder
    }
    function getUserDataFromSession() {
        // const userDataString = localStorage.getItem('userData');
        // return userDataString ? JSON.parse(userDataString) : { name: 'User', memberId: null, companyId: null };
        return { name: 'Demo User', memberId: 1, companyId: 1 }; // Placeholder
    }

    // --- Utility Functions ---
    function showGlobalMessage(message, type = 'error') {
        globalMessage.textContent = message;
        globalMessage.className = `message-area ${type === 'success' ? 'message-success' : 'message-error'}`;
        globalMessage.classList.remove('hidden');
        setTimeout(() => globalMessage.classList.add('hidden'), 7000);
    }
    function getStatusClass(status) {
        if (status === 'In Progress') return 'status-in-progress';
        if (status === 'Completed') return 'status-completed';
        if (status === 'Pending') return 'status-pending';
        return 'bg-gray-200 text-gray-800';
    }
    function getPriorityClass(priority) { // Priority is '1', '2', or '3'
        if (priority === '1') return 'priority-1'; // High
        if (priority === '2') return 'priority-2'; // Medium
        if (priority === '3') return 'priority-3'; // Low
        return '';
    }
    function getPriorityText(priority) {
        if (priority === '1') return 'High';
        if (priority === '2') return 'Medium';
        if (priority === '3') return 'Low';
        return priority;
    }
    function formatDateShort(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        if (isNaN(date.getTime())) return 'Invalid Date';
        return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
    }
    function getInitials(name) {
        if (!name || typeof name !== 'string') return '?';
        const parts = name.trim().split(' ');
        if (parts.length === 1 && parts[0].length > 0) return parts[0].substring(0, 2).toUpperCase();
        if (parts.length > 1) {
            return (parts[0][0] + (parts[parts.length - 1][0] || '')).toUpperCase();
        }
        return name.substring(0, 2).toUpperCase() || '?';
    }


    // --- Data Fetching and Processing ---
    async function fetchDashboardData() {
        loadingIndicatorPage.classList.remove('hidden');
        dashboardContent.classList.add('hidden');
        const token = getAuthToken();
        const headers = { 'Authorization': `Bearer ${token}` };

        try {
            const [projectsResponse, tasksResponse, membersResponse] = await Promise.all([
                fetch(`${API_BASE_URL}/projects`, { headers }),
                fetch(`${API_BASE_URL}/tasks`, { headers }),
                fetch(`${API_BASE_URL}/members`, { headers })
            ]);

            if (!projectsResponse.ok) throw new Error(`Projects: ${projectsResponse.statusText}`);
            if (!tasksResponse.ok) throw new Error(`Tasks: ${tasksResponse.statusText}`);
            if (!membersResponse.ok) throw new Error(`Members: ${membersResponse.statusText}`);

            const projectsData = (await projectsResponse.json()).projects || (await projectsResponse.json());
            const tasksData = (await tasksResponse.json()).tasks || (await tasksResponse.json());
            const membersData = (await membersResponse.json()).members || (await membersResponse.json());

            populateDashboard(projectsData, tasksData, membersData);
            dashboardContent.classList.remove('hidden');

        } catch (error) {
            console.error('Error fetching dashboard data:', error);
            showGlobalMessage(`Error loading dashboard: ${error.message}`);
        } finally {
            loadingIndicatorPage.classList.add('hidden');
        }
    }

    function populateDashboard(projects, tasks, members) {
        // Update Summary Stats
        totalProjectsStat.textContent = projects.length;

        const activeTasks = tasks.filter(task => task.Status === 'Pending' || task.Status === 'In Progress');
        activeTasksStat.textContent = activeTasks.length;

        totalMembersStat.textContent = members.length;

        const today = new Date();
        const sevenDaysFromNow = new Date();
        sevenDaysFromNow.setDate(today.getDate() + 7);

        const upcomingTaskDeadlines = tasks.filter(task =>
            task.Deadline &&
            new Date(task.Deadline) >= today &&
            new Date(task.Deadline) <= sevenDaysFromNow &&
            task.Status !== 'Completed'
        ).length;
        // Consider project EndDate as well if needed for "upcoming deadlines"
        const upcomingProjectDeadlines = projects.filter(project =>
            project.EndDate &&
            new Date(project.EndDate + 'T00:00:00') >= today &&
            new Date(project.EndDate + 'T00:00:00') <= sevenDaysFromNow &&
            project.Status !== 'Completed'
        ).length;
        upcomingDeadlinesStat.textContent = upcomingTaskDeadlines + upcomingProjectDeadlines;


        // Populate Recent Active Tasks (e.g., top 5 by TimeStamp or Priority)
        recentTasksList.innerHTML = '';
        const sortedActiveTasks = activeTasks
            .sort((a, b) => new Date(b.TimeStamp) - new Date(a.TimeStamp)) // Sort by most recent TimeStamp
            .slice(0, 5); // Get top 5

        if (sortedActiveTasks.length > 0) {
            noRecentTasksMessage.classList.add('hidden');
            sortedActiveTasks.forEach(task => {
                const taskElement = document.createElement('div');
                taskElement.className = 'task-item flex justify-between items-center p-3 border-b border-gray-200 last:border-b-0';
                taskElement.innerHTML = `
                        <div>
                            <h4 class="font-medium text-gray-800 text-sm">${task.Title}</h4>
                            <p class="text-xs text-gray-500">Project: ${getProjectName(task.ProjectID, projects)} | Due: ${formatDateShort(task.Deadline)}</p>
                        </div>
                        <div class="flex items-center space-x-2">
                           <span class="text-xs font-semibold px-2 py-0.5 rounded-full ${getStatusClass(task.Status)}">${task.Status}</span>
                           <i class="fas fa-circle text-xs ${getPriorityClass(task.Priority)}" title="Priority: ${getPriorityText(task.Priority)}"></i>
                        </div>
                    `;
                recentTasksList.appendChild(taskElement);
            });
        } else {
            noRecentTasksMessage.classList.remove('hidden');
        }

        // Populate Team Overview (e.g., first 5 members)
        teamOverviewList.innerHTML = '';
        const teamSample = members.slice(0, 5);
        if (teamSample.length > 0) {
            noTeamMembersMessage.classList.add('hidden');
            teamSample.forEach(member => {
                const memberElement = document.createElement('div');
                memberElement.className = 'member-item flex items-center p-2.5';
                memberElement.innerHTML = `
                        <div class="avatar-initials w-10 h-10 text-sm mr-3 flex-shrink-0">${getInitials(member.Name)}</div>
                        <div>
                            <p class="font-medium text-gray-800 text-sm">${member.Name}</p>
                            <p class="text-xs text-gray-500">${member.Position || 'N/A'}</p>
                        </div>
                    `;
                teamOverviewList.appendChild(memberElement);
            });
        } else {
            noTeamMembersMessage.classList.remove('hidden');
        }
    }

    function getProjectName(projectId, projectsList) { // Pass projects list to avoid global dependency
        const project = projectsList.find(p => p.ProjectID == projectId);
        return project ? project.Name : `ID ${projectId}`;
    }


    // --- Initial Load ---
    document.addEventListener('DOMContentLoaded', () => {
        const userData = getUserDataFromSession();
        userNameDisplay.textContent = userData.name || 'User';

        // if (!getAuthToken()) { window.location.href = '/login.html'; return; }
        fetchDashboardData();
    });
</script>
</body>
</html>
