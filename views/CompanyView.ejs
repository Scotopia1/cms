<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Companies View - CMS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .company-logo-initials { /* Updated class name for clarity */
            width: 60px;
            height: 60px;
            border-radius: 0.375rem; /* rounded-md */
            background-color: #6d28d9; /* Purple-700 */
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1.5rem; /* 24px */
            text-transform: uppercase;
            object-fit: contain;
        }
        .company-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .company-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0,0,0,0.07), 0 4px 6px -2px rgba(0,0,0,0.04);
        }
        /* Modal transition styles */
        .modal-bg-enter { transition: opacity 0.3s ease-out; }
        .modal-bg-enter-from { opacity: 0; }
        .modal-bg-enter-to { opacity: 1; }
        .modal-bg-leave { transition: opacity 0.2s ease-in; }
        .modal-bg-leave-from { opacity: 1; }
        .modal-bg-leave-to { opacity: 0; }

        .modal-panel-enter { transition: all 0.3s ease-out; }
        .modal-panel-enter-from { opacity: 0; transform: translateY(-20px) scale(0.95); }
        .modal-panel-enter-to { opacity: 1; transform: translateY(0) scale(1); }
        .modal-panel-leave { transition: all 0.2s ease-in; }
        .modal-panel-leave-from { opacity: 1; transform: translateY(0) scale(1); }
        .modal-panel-leave-to { opacity: 0; transform: translateY(-20px) scale(0.95); }

        .loading-spinner-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .message-area {
            padding: 0.75rem;
            margin-bottom: 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
        }
        .message-success {
            background-color: #d1fae5; color: #065f46; border: 1px solid #34d399;
        }
        .message-error {
            background-color: #fee2e2; color: #991b1b; border: 1px solid #f87171;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen p-4 sm:p-6 lg:p-8">
<div class="container mx-auto">
    <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800">Companies</h1>
        <p class="text-gray-600">Manage client companies and partner organizations.</p>
    </header>

    <div id="globalMessage" class="message-area hidden"></div>

    <div class="mb-6 flex flex-col sm:flex-row justify-between items-center gap-4">
        <button id="addCompanyBtn" class="w-full sm:w-auto bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out flex items-center justify-center">
            <i class="fas fa-building mr-2"></i> Add New Company
        </button>
        <div class="w-full sm:w-auto flex flex-col sm:flex-row gap-2">
            <input type="text" id="searchCompany" placeholder="Search by name or website..." class="w-full sm:w-64 bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
            <select id="filterIndustry" class="w-full sm:w-auto bg-white border border-gray-300 text-gray-700 py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                <option value="all">All Industries</option>
                <option value="Technology">Technology</option>
                <option value="Finance">Finance</option>
                <option value="Healthcare">Healthcare</option>
                <option value="Retail">Retail</option>
                <option value="Manufacturing">Manufacturing</option>
                <option value="Consulting">Consulting</option>
                <option value="Other">Other</option>
            </select>
        </div>
    </div>

    <div id="loadingIndicator" class="loading-spinner-container hidden"><div class="loading-spinner"></div></div>

    <div id="companyGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    </div>

    <div id="noCompaniesMessage" class="hidden text-center py-12">
        <i class="fas fa-city fa-3x text-gray-400 mb-4"></i>
        <p class="text-xl text-gray-600">No companies found.</p>
        <p class="text-gray-500">Start by adding a new company or check your filters!</p>
    </div>
</div>

<div id="companyModal" class="fixed inset-0 bg-gray-800 bg-opacity-75 overflow-y-auto h-full w-full flex items-center justify-center hidden px-4 modal-bg-enter-from" data-transition-state="closed">
    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-2xl w-full max-w-lg transform transition-all modal-panel-enter-from">
        <div class="flex justify-between items-center mb-6">
            <h2 id="modalTitle" class="text-2xl font-semibold text-gray-800">Add New Company</h2>
            <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
                <i class="fas fa-times fa-lg"></i>
            </button>
        </div>
        <form id="companyForm">
            <input type="hidden" id="companyId" name="CompanyID">
            <div class="mb-4">
                <label for="companyName" class="block text-sm font-medium text-gray-700 mb-1">Company Name <span class="text-red-500">*</span></label>
                <input type="text" id="companyName" name="Name" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500" required>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="companyIndustry" class="block text-sm font-medium text-gray-700 mb-1">Industry</label>
                    <input type="text" id="companyIndustry" name="Industry" placeholder="e.g., Software Development" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500">
                </div>
                <div>
                    <label for="companyWebsite" class="block text-sm font-medium text-gray-700 mb-1">Website</label>
                    <input type="url" id="companyWebsite" name="Website" placeholder="https://example.com" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500">
                </div>
            </div>
            <div class="mb-4">
                <label for="companyLocation" class="block text-sm font-medium text-gray-700 mb-1">Location / Address</label>
                <textarea id="companyLocation" name="Location" rows="2" placeholder="123 Main St, Anytown, USA" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500"></textarea>
            </div>
            <div class="mb-6">
                <label for="companyContactInfo" class="block text-sm font-medium text-gray-700 mb-1">Contact Info (Phone/Email)</label>
                <input type="text" id="companyContactInfo" name="ContactInfo" placeholder="info@example.com / 555-1234" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500">
            </div>

            <div id="modalMessage" class="message-area hidden"></div>

            <div class="flex justify-end gap-3 mt-2 pt-4 border-t">
                <button type="button" id="cancelModalBtn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg border border-gray-300 transition-colors">Cancel</button>
                <button type="submit" id="saveCompanyBtn" class="px-4 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-lg shadow-md transition-colors">
                    <span id="saveCompanyBtnText">Save Company</span>
                    <i id="saveCompanyBtnSpinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    const API_BASE_URL = '/api';

    // DOM Elements
    const companyGrid = document.getElementById('companyGrid');
    const noCompaniesMessage = document.getElementById('noCompaniesMessage');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const globalMessage = document.getElementById('globalMessage');

    const companyModal = document.getElementById('companyModal');
    const addCompanyBtn = document.getElementById('addCompanyBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const cancelModalBtn = document.getElementById('cancelModalBtn');
    const companyForm = document.getElementById('companyForm');
    const modalTitle = document.getElementById('modalTitle');
    const modalMessage = document.getElementById('modalMessage');
    const saveCompanyBtn = document.getElementById('saveCompanyBtn');
    const saveCompanyBtnText = document.getElementById('saveCompanyBtnText');
    const saveCompanyBtnSpinner = document.getElementById('saveCompanyBtnSpinner');

    const searchCompanyInput = document.getElementById('searchCompany');
    const filterIndustrySelect = document.getElementById('filterIndustry');

    let allCompanies = [];

    // --- Authentication Placeholder ---
    function getAuthToken() {
        // return localStorage.getItem('authToken');
        return 'dummy-auth-token';
    }

    // --- Utility Functions ---
    function showGlobalMessage(message, type = 'error') {
        globalMessage.textContent = message;
        globalMessage.className = `message-area ${type === 'success' ? 'message-success' : 'message-error'}`;
        globalMessage.classList.remove('hidden');
        setTimeout(() => globalMessage.classList.add('hidden'), 5000);
    }
    function showModalMessage(message, type = 'error') {
        modalMessage.textContent = message;
        modalMessage.className = `message-area ${type === 'success' ? 'message-success' : 'message-error'}`;
        modalMessage.classList.remove('hidden');
    }
    function getInitials(name) {
        if (!name || typeof name !== 'string') return 'C';
        const parts = name.trim().split(' ');
        let initials = parts[0]?.[0] || '';
        if (parts.length > 1 && parts[parts.length -1]?.[0]) {
            initials += parts[parts.length -1][0];
        } else if (name.length > 1 && !initials) { // If only one word, take first two letters
            initials = name.substring(0,2);
        }
        return initials.toUpperCase() || 'C';
    }

    // --- API Interaction ---
    async function fetchCompanies() {
        loadingIndicator.classList.remove('hidden');
        companyGrid.classList.add('hidden');
        noCompaniesMessage.classList.add('hidden');
        try {
            const token = getAuthToken();
            const response = await fetch(`${API_BASE_URL}/companies`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `HTTP error! Status: ${response.status}` }));
                throw new Error(errorData.message || `Failed to fetch companies. Status: ${response.status}`);
            }
            const data = await response.json();
            allCompanies = data.companies || data; // Adapt to your API response structure
            populateIndustryFilter(allCompanies);
            filterAndRenderCompanies();
        } catch (error) {
            console.error('Error fetching companies:', error);
            showGlobalMessage(`Error fetching companies: ${error.message}`);
            allCompanies = [];
            filterAndRenderCompanies();
        } finally {
            loadingIndicator.classList.add('hidden');
        }
    }

    function populateIndustryFilter(companies) {
        const industries = [...new Set(companies.map(c => c.Industry).filter(Boolean))].sort();
        const existingOptions = new Set(Array.from(filterIndustrySelect.options).map(opt => opt.value));

        industries.forEach(industry => {
            if (!existingOptions.has(industry)) {
                const option = document.createElement('option');
                option.value = industry;
                option.textContent = industry;
                filterIndustrySelect.appendChild(option);
            }
        });
    }


    // Render Company Cards
    function renderCompanies(companiesToRender = allCompanies) {
        companyGrid.innerHTML = '';
        if (companiesToRender.length === 0) {
            noCompaniesMessage.classList.remove('hidden');
            companyGrid.classList.add('hidden');
        } else {
            noCompaniesMessage.classList.add('hidden');
            companyGrid.classList.remove('hidden');
            companiesToRender.forEach(company => {
                const card = document.createElement('div');
                card.className = 'bg-white rounded-xl shadow-lg p-6 company-card flex flex-col';

                // CompanyID, Name, Location, ContactInfo, Industry, Website from DB
                card.innerHTML = `
                        <div class="flex items-start mb-4">
                           <div class="company-logo-initials mr-4">${getInitials(company.Name)}</div>
                           <div class="flex-1">
                                <h2 class="text-xl font-semibold text-gray-800 break-words">${company.Name}</h2>
                                <p class="text-sm text-purple-600 font-medium capitalize">${company.Industry || 'N/A'}</p>
                           </div>
                        </div>
                        ${company.Website ? `<p class="text-sm text-gray-600 mb-1"><i class="fas fa-globe fa-fw mr-2 text-gray-400"></i><a href="${company.Website.startsWith('http') ? company.Website : 'http://' + company.Website}" target="_blank" rel="noopener noreferrer" class="hover:text-purple-700 hover:underline break-all">${company.Website}</a></p>` : ''}
                        ${company.ContactInfo ? `<p class="text-sm text-gray-600 mb-1"><i class="fas fa-phone-alt fa-fw mr-2 text-gray-400"></i>${company.ContactInfo}</p>` : ''}
                        ${company.Location ? `<p class="text-sm text-gray-600 mt-2"><i class="fas fa-map-marker-alt fa-fw mr-2 text-gray-400"></i>${company.Location}</p>` : ''}
                        <div class="mt-auto pt-4 border-t border-gray-200 w-full flex justify-end gap-2">
                            <button class="edit-btn text-blue-600 hover:text-blue-800 text-sm font-medium" data-id="${company.CompanyID}"><i class="fas fa-edit mr-1"></i>Edit</button>
                            <button class="delete-btn text-red-600 hover:text-red-800 text-sm font-medium" data-id="${company.CompanyID}"><i class="fas fa-trash mr-1"></i>Delete</button>
                        </div>
                    `;
                companyGrid.appendChild(card);
            });
        }
        attachEventListenersToCards();
    }

    function attachEventListenersToCards() {
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', handleEditCompany);
        });
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', handleDeleteCompany);
        });
    }

    // Modal Management
    function openModal(company = null) {
        companyForm.reset();
        modalMessage.classList.add('hidden');
        if (company) {
            modalTitle.textContent = 'Edit Company';
            document.getElementById('companyId').value = company.CompanyID;
            document.getElementById('companyName').value = company.Name;
            document.getElementById('companyIndustry').value = company.Industry || '';
            document.getElementById('companyWebsite').value = company.Website || '';
            document.getElementById('companyLocation').value = company.Location || '';
            document.getElementById('companyContactInfo').value = company.ContactInfo || '';
        } else {
            modalTitle.textContent = 'Add New Company';
            document.getElementById('companyId').value = '';
        }
        companyModal.classList.remove('hidden');
        requestAnimationFrame(() => {
            companyModal.classList.remove('modal-bg-enter-from');
            companyModal.querySelector('.modal-panel-enter-from').classList.remove('modal-panel-enter-from');
            companyModal.dataset.transitionState = 'opened';
        });
    }

    function closeModal() {
        companyModal.dataset.transitionState = 'closing';
        companyModal.classList.add('modal-bg-leave-to');
        companyModal.querySelector('div > div').classList.add('modal-panel-leave-to');
        setTimeout(() => {
            companyModal.classList.add('hidden');
            companyModal.classList.remove('modal-bg-leave-to', 'modal-bg-enter-from');
            const panel = companyModal.querySelector('div > div');
            panel.classList.remove('modal-panel-leave-to', 'modal-panel-enter-from');
            companyModal.dataset.transitionState = 'closed';
        }, 200);
    }

    addCompanyBtn.addEventListener('click', () => openModal());
    closeModalBtn.addEventListener('click', closeModal);
    cancelModalBtn.addEventListener('click', closeModal);

    // Form Submission
    companyForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        saveCompanyBtnText.textContent = 'Saving...';
        saveCompanyBtnSpinner.classList.remove('hidden');
        saveCompanyBtn.disabled = true;
        modalMessage.classList.add('hidden');

        const formData = new FormData(companyForm);
        const companyData = Object.fromEntries(formData.entries());
        const companyId = document.getElementById('companyId').value;

        const method = companyId ? 'PUT' : 'POST';
        const endpoint = companyId ? `${API_BASE_URL}/companies/${companyId}` : `${API_BASE_URL}/companies`;

        try {
            const token = getAuthToken();
            const response = await fetch(endpoint, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(companyData)
            });
            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || `Failed to ${companyId ? 'update' : 'add'} company. Status: ${response.status}`);
            }

            showGlobalMessage(`Company successfully ${companyId ? 'updated' : 'added'}!`, 'success');
            fetchCompanies(); // Refresh list
            closeModal();

        } catch (error) {
            console.error(`Error ${companyId ? 'updating' : 'adding'} company:`, error);
            showModalMessage(`Error: ${error.message}`);
        } finally {
            saveCompanyBtnText.textContent = 'Save Company';
            saveCompanyBtnSpinner.classList.add('hidden');
            saveCompanyBtn.disabled = false;
        }
    });

    function handleEditCompany(event) {
        const companyId = event.currentTarget.dataset.id;
        const companyToEdit = allCompanies.find(c => c.CompanyID == companyId);
        if (companyToEdit) {
            openModal(companyToEdit);
        }
    }

    async function handleDeleteCompany(event) {
        const companyId = event.currentTarget.dataset.id;
        if (confirm('Are you sure you want to delete this company? This may also affect related projects and members.')) {
            try {
                const token = getAuthToken();
                const response = await fetch(`${API_BASE_URL}/companies/${companyId}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: `HTTP error! Status: ${response.status}` }));
                    throw new Error(errorData.message || `Failed to delete company. Status: ${response.status}`);
                }
                showGlobalMessage('Company deleted successfully.', 'success');
                fetchCompanies(); // Refresh list
            } catch (error) {
                console.error('Error deleting company:', error);
                showGlobalMessage(`Error deleting company: ${error.message}`);
            }
        }
    }

    // Client-side Filtering
    function filterAndRenderCompanies() {
        const industryFilter = filterIndustrySelect.value;
        const searchTerm = searchCompanyInput.value.toLowerCase();
        let tempCompanies = allCompanies;

        if (industryFilter !== 'all') {
            tempCompanies = tempCompanies.filter(c => c.Industry === industryFilter);
        }
        if (searchTerm) {
            tempCompanies = tempCompanies.filter(c =>
                (c.Name && c.Name.toLowerCase().includes(searchTerm)) ||
                (c.Website && c.Website.toLowerCase().includes(searchTerm))
            );
        }
        renderCompanies(tempCompanies);
    }

    searchCompanyInput.addEventListener('input', filterAndRenderCompanies);
    filterIndustrySelect.addEventListener('change', filterAndRenderCompanies);

    // --- Initial Load ---
    // if (!getAuthToken()) { window.location.href = '/login.html'; }
    // else {
    fetchCompanies();
    // }
</script>
</body>
</html>